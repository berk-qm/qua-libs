from nodeio.inputs import Inputs
from flame.workflow import Workflow

__all__ = ["ResSpecNode"]


class ResSpecNode(object):
    def __init__(self, workflow_node_unique_name, state=None):
        """does resonator spec

        :param state: (JSON - STREAM) initial json generated by quam
        """
        self._command = "python3"
        self._bin = "node_res_spec.py"
        self._name = workflow_node_unique_name
        self._icon = ""
        self._inputs = _Inputs(
            state=state,
        )
        self._outputs = _Outputs(self._name)
        self._host = {}
        Workflow._register_node(self)  # register the node in the workflow context

    def host(self, **kwargs):
        """Sets additional options for execution on the host."""
        for key, value in kwargs.items():
            self._host[key] = value
        return self

    @property
    def i(self):
        """Node inputs"""
        return self._inputs

    @property
    def o(self):
        """Node outputs"""
        return self._outputs

    def __str__(self):
        return self._name


class _Inputs(object):
    def __init__(self, state=None):
        self._inputs = Inputs()

        self._inputs.state("state", description="initial json generated by quam", units="JSON")
        self._inputs.set(state=state)

    @property
    def state(self):
        """Input: initial json generated by quam (JSON)"""
        return self._inputs.get("state")

    @state.setter
    def state(self, value):
        """Input: initial json generated by quam (JSON)"""
        self._inputs.set(state=value)


class _Outputs(object):
    def __init__(self, name):
        self._name = name
        self._outputs = [
            "IQ",
            "state",
        ]

    @property
    def IQ(self):
        """Output: IQ from measurement
        :return: (list)
        """
        return "#" + self._name + "/IQ"

    @property
    def state(self):
        """Output: machine used in res spec
        :return: (JSON)
        """
        return "#" + self._name + "/state"
